"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var os=_interopDefault(require("os")),net=_interopDefault(require("net")),process=_interopDefault(require("process"));var serve=e=>net.createServer(e);const echo=e=>{e.pipe(e).on("error",t=>{e.destroy(t)}).on("timeout",t=>{e.destroy(t)})},r="error",t="timeout";const elog=e=>console.error(e.toString()),p=e=>/^\d{1,5}$/.test(e),port=process.env.PORT||80,sslport=process.env.SSLPORT||443,echoport=process.env.ECHOPORT,f_host=process.env.FORWARD_HOST,f_port=process.env.FORWARD_PORT;if(p(echoport))serve(echo).listen(echoport);else if(f_host&&p(f_port)){serve(e=>((e,o,n)=>{const s=net.createConnection({host:o,port:n},()=>{s.pipe(e).on(r,e=>{s.destroy(e)}).on(t,e=>{s.destroy(e)}),e.pipe(s).on(r,t=>{e.destroy(t)}).on(t,t=>{e.destroy(t)})}).on(r,t=>{e.destroy(t)})})(e,f_host,f_port)).listen(port)}else{serve(e=>{e.once("data",o=>{let n,s;if((e=>{if(e.length<5)return!1;if(22!==e[0])return!1;const t=e[1],r=e[2];if(3!==t)return!1;if(r<1||r>3)return!1;const o=e[3]<<8|e[4];return!(e.length<5+o)&&1===e[5]})(o))n=(e=>{let t=e.length,r=43;if(r>t-1)return null;if((r+=1+e[r])>t-2)return null;if((r+=2+(e[r]<<8|e[r+1]))>t-1)return null;if((r+=1+e[r])>t-2)return null;let o=e[r]<<8|e[r+1],n=(r+=2)+o;if(n>t)return null;for(t=n;r<=t-4;){let o=e[r]<<8|e[r+1],n=e[r+2]<<8|e[r+3];if(r+=4,0===o){if(r>t-2)return null;let o=e[r]<<8|e[r+1],n=r+=2;if((r+=o)>t)return null;for(;n<r-3;){let r=e[n],o=e[n+1]<<8|e[n+2];if(n+=3,0===r)return n>t-o?null:e.toString("ascii",n,n+o);n+=o}}else r+=n}return null})(o),s=sslport;else{const e=(e=>{const t=e.toString().split(os.EOL),r=t.length;for(let e=0;e<r;e++){const[r,o,n]=t[e].split(":",3);if("host"==r.toLowerCase())return{host:o.trim(),port:n||80}}return{}})(o);n=e.host,s=e.port}n?((e,o,n,s)=>{const i=net.createConnection({host:n,port:s},()=>{i.write(o,()=>{i.pipe(e).on(r,e=>{i.destroy(e)}).on(t,e=>{i.destroy(e)}),e.pipe(i).on(r,t=>{e.destroy(t)}).on(t,t=>{e.destroy(t)})})}).on(r,t=>{e.destroy(t)})})(e,o,n,s):e.write(o,()=>{e.pipe(e)})}).on("error",elog)}).listen(port)}